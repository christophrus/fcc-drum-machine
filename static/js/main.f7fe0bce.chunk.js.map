{"version":3,"sources":["components/data/kits.js","components/DrumPad/DrumPad.js","components/DrumPadHolder/DrumPadHolder.js","classes/Key.js","components/Controller/Controller.js","components/Display/Display.js","App.js","serviceWorker.js","index.js"],"names":["kits","kitOne","code","name","text","url","kitTwo","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","window","addEventListener","handleKeyPress","state","isActivated","bind","assertThisInitialized","play","_this2","power","_this$props","drumPad","updateDisplay","setState","audio","Audio","document","getElementById","currentTime","volume","setTimeout","duration","e","keyCode","removeEventListener","_this3","classes","classNames","drum-pad shadow my-2","bg-orange-darker text-orange-light","bg-orange","react_default","a","createElement","id","className","key","onClick","class","src","Component","DrumPadHolder","kit","map","i","components_DrumPad_DrumPad","Key","Controller","type","checked","onChange","updatePower","min","max","value","updateVolume","updateKit","Display","display","App","currentKit","target","ret","forEach","button","push","getKit","prevProps","prevState","_this$state","components_Display_Display","components_DrumPadHolder_DrumPadHolder","components_Controller_Controller","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7fe0bce.chunk.js","sourcesContent":["const kitOne = [{\r\n    code: 81,\r\n    name: 'Q',\r\n    text: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n}, {\r\n    code: 87,\r\n    name: 'W',\r\n    text: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n}, {\r\n    code: 69,\r\n    name: 'E',\r\n    text: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n}, {\r\n    code: 65,\r\n    name: 'A',\r\n    text: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n}, {\r\n    code: 83,\r\n    name: 'S',\r\n    text: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n}, {\r\n    code: 68,\r\n    name: 'D',\r\n    text: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n}, {\r\n    code: 90,\r\n    name: 'Z',\r\n    text: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n}, {\r\n    code: 88,\r\n    name: 'X',\r\n    text: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n}, {\r\n    code: 67,\r\n    name: 'C',\r\n    text: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n},\r\n];\r\n\r\nconst kitTwo = [{\r\n    code: 81,\r\n    name: 'Q',\r\n    text: 'Chord-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n}, {\r\n    code: 87,\r\n    name: 'W',\r\n    text: 'Chord-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n}, {\r\n    code: 69,\r\n    name: 'E',\r\n    text: 'Chord-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n}, {\r\n    code: 65,\r\n    name: 'A',\r\n    text: 'Shaker',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n}, {\r\n    code: 83,\r\n    name: 'S',\r\n    text: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n}, {\r\n    code: 68,\r\n    name: 'D',\r\n    text: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n}, {\r\n    code: 90,\r\n    name: 'Z',\r\n    text: 'Punchy-Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n}, {\r\n    code: 88,\r\n    name: 'X',\r\n    text: 'Side-Stick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n}, {\r\n    code: 67,\r\n    name: 'C',\r\n    text: 'Snare',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n}\r\n];\r\n\r\nconst kits = {\r\n    kitOne, kitTwo\r\n}\r\n\r\nexport default kits;","import React, { Component } from 'react';\r\nimport classNames from 'classnames';\r\n\r\nclass DrumPad extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isActivated: false\r\n        }\r\n\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        this.play = this.play.bind(this);\r\n    }\r\n\r\n    play() {\r\n        if (this.props.power) {\r\n            const { drumPad, updateDisplay } = this.props;\r\n            this.setState({\r\n                isActivated: false\r\n            })\r\n            let audio = new Audio();\r\n            audio = document.getElementById(drumPad.name);\r\n            audio.currentTime = 0;\r\n            audio.volume = this.props.volume / 100;\r\n            audio.play();\r\n            this.setState({\r\n                isActivated: true\r\n            })\r\n            setTimeout(() => this.setState({ isActivated: false}), audio.duration*1000);\r\n            updateDisplay(drumPad.text);\r\n        }\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.keyCode === this.props.drumPad.code) {\r\n            this.play();\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        window.addEventListener(\"keydown\", this.handleKeyPress);\r\n    };\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\r\n    }\r\n\r\n    render() {\r\n        const { drumPad } = this.props;\r\n        let classes = classNames({\r\n            'drum-pad shadow my-2': true,\r\n            'bg-orange-darker text-orange-light': this.state.isActivated,\r\n            'bg-orange': !this.state.isActivated\r\n        });\r\n\r\n        return (\r\n            <div id={drumPad.text} className={classes} key={drumPad.text} onClick={() => this.play()}>\r\n                <audio class=\"clip\" id={drumPad.name} src={drumPad.url} ></audio>\r\n                <span>{drumPad.name}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPad;","import React, { Component } from 'react';\r\nimport './DrumPadHolder.css'\r\nimport DrumPad from '../DrumPad/DrumPad'\r\n\r\nclass DrumPadHolder extends Component {\r\n\r\n    render() {\r\n        let kit = this.props.kit.map((drumPad,i) => {\r\n            return (\r\n                <DrumPad \r\n                    drumPad={drumPad}\r\n                    updateDisplay={(text) => this.props.updateDisplay(text)}\r\n                    volume={this.props.volume}\r\n                    power={this.props.power}\r\n                    key={\"drumPad-\"+i}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div id=\"drum-pad\">\r\n                {kit}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DrumPadHolder;","class Key {\r\n  constructor (code, name, text, url) {\r\n    this.code = code;\r\n    this.name = name;\r\n    this.text = text;\r\n    this.url = url;\r\n  }\r\n}\r\n\r\nexport default Key;","import React, { Component } from 'react';\r\nimport './Controller.css'\r\n\r\nclass Controller extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"flex p-2 shadow rounded-lg bg-orange-light\">\r\n                <div className=\"w-1/5 flex justify-center items-center flex-col\">\r\n                <span className=\"mb-2\">Power</span>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" checked={this.props.power} onChange={this.props.updatePower} />\r\n                    <span className=\"switch-slider\"></span>\r\n                </label>\r\n                </div>\r\n                <div className=\"w-3/5 flex justify-center items-center flex-col content-between\">\r\n                    <span className=\"mb-2\">Volume</span>\r\n                    <input type=\"range\" min=\"1\" max=\"100\" value={this.props.volume} className=\"slider\" id=\"volume\" onChange={this.props.updateVolume} />\r\n                </div>\r\n                <div className=\"w-1/5 flex justify-center items-center flex-col\">\r\n                <span className=\"mb-2\">Kit</span>\r\n                <label className=\"switch\">\r\n                    <input type=\"checkbox\" checked={this.props.kit} onChange={this.props.updateKit} />\r\n                    <span className=\"switch-slider always-active\"></span>\r\n                </label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Controller;","import React, { Component } from 'react';\r\n\r\nclass Display extends Component {\r\n    render() {\r\n        return (\r\n            <div id=\"display\" className=\"text-center h-8 p-4 w-full flex items-center justify-center bg-orange-light shadow\">\r\n                <span>{this.props.display}</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react';\nimport './App.css';\nimport kits from './components/data/kits';\nimport DrumPadHolder from './components/DrumPadHolder/DrumPadHolder';\nimport Key from './classes/Key';\nimport Controller from './components/Controller/Controller';\nimport Display from './components/Display/Display';\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      kit: [],\n      power: true,\n      display: '',\n      currentKit: 'kitOne',\n      volume: 50,\n    }\n\n    this.updateDisplay = this.updateDisplay.bind(this);\n    this.updateVolume = this.updateVolume.bind(this);\n    this.updateKit = this.updateKit.bind(this);\n    this.updatePower = this.updatePower.bind(this);\n\n  }\n\n  updateDisplay(text) {\n    this.setState({\n      display: text\n    })\n  }\n\n  updateVolume(e) {\n    if (this.state.power) {\n      this.setState({\n        volume: e.target.value\n      })\n      this.updateDisplay(\"Volume: \" + e.target.value);\n    }\n  }\n\n  updatePower(e) {\n    this.setState({\n      power: e.target.checked\n    })\n    let text = e.target.checked ? \"On\" : \"Off\";\n    this.updateDisplay(\"Power: \"+text);\n    if (!e.target.checked) {\n      setTimeout(() => this.updateDisplay(\"\"), 1000);\n    }\n  }\n\n  updateKit(e) {\n    if (this.state.power) {\n      let kit = !e.target.checked ? 'kitOne' : 'kitTwo';\n      let text = !e.target.checked ? 'Heater Kit' : 'Smoth Piano Kit';\n      this.setState({\n        currentKit: kit\n      })\n      this.updateDisplay(text);\n    }\n  }\n\n  getKit(kit) {\n\n    let ret = [];\n    kits[kit].forEach(button => ret.push( new Key(button.code, button.name, button.text, button.url) ));\n    return ret;\n\n  }\n\n  componentDidMount() {\n\n    this.setState({\n      kit: this.getKit(this.state.currentKit)\n    })\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.currentKit !== this.state.currentKit) {\n      this.setState({\n        kit: this.getKit(this.state.currentKit)\n      })\n    }\n  }\n\n  render() {\n    const { kit, display, volume, power, currentKit  } = this.state;\n    return (\n      <main className=\"flex justify-center bg-orange-lightest items-center flex-col h-screen text-orange-darkest font-mono\">\n        <div className=\"w-full sm:w-5/6 md:w-2/3 lg:w-1/2 p-8 bg-orange-dark p-4 text-center\" id=\"drum-machine\">\n          <h1 className=\"mb-4\">Drum Machine</h1>\n          <Display\n            display={display}\n          />\n          <DrumPadHolder\n            kit={kit}\n            updateDisplay={text => this.updateDisplay(text)}\n            volume={volume}\n            power={power}\n          />\n          <Controller\n            volume={volume}\n            power={power}\n            kit={currentKit !== 'kitOne' ? true : false}\n            updateVolume={this.updateVolume}\n            updatePower={this.updatePower}\n            updateKit={this.updateKit}\n          />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}